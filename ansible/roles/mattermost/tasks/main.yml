---

- name: packages | Apt-get install deb dependancies.
  apt: name={{ item }} state=present install_recommends=no
  with_items:
    - mysql-server
    - nginx
    - nodejs # for jira-bridge
    - nodejs-legacy
    - npm
    - python-mysqldb # required for ansible db config
    - python-flask # required by mattermost-github-integration
    - python-requests # required by mattermost-github-integration
    - pwgen # for lazy password generation
  tags:
    - packages

- name: packages | Install Mattermost from tar archive.
  unarchive: src=https://releases.mattermost.com/2.2.0/mattermost-team-2.2.0-linux-amd64.tar.gz dest=/opt/ copy=no
  tags:
    - packages

- name: packages | Install Mattermost Github integration.
  git: repo=https://github.com/softdevteam/mattermost-github-integration
       dest=/opt/mattermost-github-integration
  tags:
    - packages

# TODO: run "npm install", etc
- name: packages | Install Mattermost JIRA integration.
  git: repo=https://github.com/vrenjith/jira-matter-bridge.git
       dest=/opt/jira-matter-bridge
  tags:
    - packages

- name: Create the Mattermost unix user.
  user: name=mattermost comment="Mattermost"

- name: Check permissions and existence of misc directories.
  file: path=/opt/mattermost/{{ item }} state=directory mode=0755 owner=mattermost group=mattermost
  with_items:
    - data
    - config
    - logs

- name: mysql | Create MySQL database.
  mysql_db: name="{{ mattermost_sql_dbname }}" state=present
  tags:
    - mysql

- name: mysql | Check if a MySQL password was already generated.
  stat: path=/root/mattermost-sql-password
  register: mattermost_sql_password_file
  tags:
    - mysql

- name: mysql | Generate a MySQL password.
  shell: pwgen 15 1 > /root/mattermost-sql-password
  when: mattermost_sql_password_file.stat.exists == False
  tags:
    - mysql

- name: mysql | Read the password and store in variable.
  shell: cat {{ "/root/mattermost-sql-password" }}
  register: mattermost_sql_password
  tags:
    - mysql

- name: mysql | Create MySQL user.
  mysql_user: name={{ mattermost_sql_user }} password={{ mattermost_sql_password.stdout }} priv="{{ mattermost_sql_dbname}}.*:ALL"
  tags:
    - mysql

- name: Check if the Mattermost config.json was already deployed.
  stat: path=/opt/mattermost/config/config.json
  register: mattermost_config_file

# Being lazy, since don't feel like generating all the salts and storing them..
- name: Deploy Mattermost config.js
  template:
    src: "config.json.j2"
    dest: "/opt/mattermost/config/config.json"
    owner: "mattermost"
    group: "mattermost"
    mode: 0640
  when: mattermost_config_file.stat.exists == False

- name: Deploy nginx vhost config.
  copy:
    src: "{{ item }}"
    dest: "/etc/nginx/sites-available/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - chat.civicrm.org.conf
  notify: restart nginx

- name: Enable nginx vhost config.
  file:
    src: "/etc/nginx/sites-available/chat.civicrm.org.conf"
    dest: "/etc/nginx/sites-enabled/chat.civicrm.org.conf"
    state: link
  notify: restart nginx

- name: Deploy Mattermost systemd unit files.
  copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - mattermost.service
    - mattermost-github.service
    - jira-matter-bridge.service

- service: name=mattermost state=started enabled=yes
- service: name=mattermost-github state=started enabled=yes
- service: name=jira-matter-bridge state=started enabled=yes
