#!/usr/bin/perl -w

# [ML] Original author unknown.
# [ML] FIXME update these comments:
# This script is designed to check a backup directory populated with
# subdirectories named after hosts, within which there are backups of various
# types.
#
# Example:
# /home/backup:
# foo.example.com
#
# foo.example.com:
# rdiff-backup .ssh
#
# rdiff-backup:
# root home rdiff-backup-data usr var

use Getopt::Std;

our $opt_d = (-d "/backup" ? "/backup" : "/srv/backups");
our $opt_c = 48 * 60 * 60;
our $opt_w = 24 * 60 * 60;
our $opt_s;
our $opt_t = "rdiff-backup";

if (!getopts('d:c:w:s:t:')) {
  print <<EOF
Usage: $0 [ -d <backupdir> ] [ -c <threshold> ] [ -w <threshold> ] [ -s <host> ] [ -t <type> ]
EOF
  ;
  exit();
}

my $backupdir= $opt_d;
my $crit = $opt_c;
my $warn = $opt_w;

my $host = $opt_s;
my $backup_type = $opt_t;

# Trim
$host =~ s/^\s+|\s+$//g;
$host =~ s/[^-0-9A-Za-z\.]//g;

chdir($backupdir);
my ($delta, $message);

$dir = "$backupdir/$host";

my $flag="";
my $type="unknown";
my $extra_msg="";
my $state = "UNKNOWN";
my $exit_value = 3;
$message = "???";

unless (-d $dir) {
  die "$host\tbackups\tCRITICAL\tno directory $dir\n";
}

my $last_bak;
my $last_elapsed_time = 0;
my $last_source_file_size = 0;
my $last_new_file_size = 0;
my $last_mirror_file_size = 0;
my $last_changed_files = 0;
my $last_changed_size = 0;

if ($backup_type eq "rdiff-backup") {
  unless (-d "$dir/rdiff-backup") {
    die "$host\tbackups\tCRITICAL\tno dir $dir/rdiff-backup\n";
  }

  $flag = "$dir/rdiff-backup/rdiff-backup-data/backup.log";

  if (open(FLAG, $flag)) {
    while (<FLAG>) {
      if (/EndTime ([0-9]*).[0-9]* \((.*)\)/) {
        $last_bak = $1;
        $extra_msg = ' [rdiff-backup]';
      }
      elsif (/ElapsedTime ([\.0-9]+)/) {
        $last_elapsed_time = $1;
      }
      elsif (/SourceFileSize ([0-9]+)/) {
        $last_source_file_size = $1;
      }
      elsif (/MirrorFileSize ([0-9]+)/) {
        $last_mirror_file_size = $1;
      }
      elsif (/NewFileSize ([0-9]+)/) {
        $last_new_file_size = $1;
      }
      elsif (/ChangedFiles ([0-9]+)/) {
        $last_changed_files = $1;
      }
      elsif (/TotalDestinationSizeChange ([0-9]+)/) {
        $last_changed_size = $1;
      }
    }
    if (!$last_bak) {
      die "$host\tbackups\tCRITICAL\tcannot parse backup.log for a valid timestamp\n";
    }
  }
  else {
    die "$host\tbackups\tCRITICAL\tcannot open $flag\n";
  }
  close(FLAG);
}
elsif ($backup_type eq "timemachine") {
  unless (-d "$dir/TimeMachine") {
    die "$host\tbackups\tCRITICAL\tno dir $dir/TimeMachine\n";
  }

  # XXX: this doesn't check backup consistency
  @files = glob("$dir/TimeMachine/*.sparsebundle");

  if (scalar @files == 1) {
    $message = "Coucou";
    $flag = $files[0];
  }
  else {
    $message = "TimeMachine: found " . (scalar @files) . " sparse files";
  }
}
else {
  die "$host\tbackups\tCRITICAL\tunknown system\n";
}

if (!defined($last_bak)) {
  my @stats = stat($flag);
  if (@stats) {
    $last_bak = $stats[9];
  }
  else {
    $message = "cannot stat flag $flag";
  }
}

if ($last_bak) {
   my $t = time();
   $delta = $t - $last_bak;

   if ($delta > $crit) {
     $state = "CRITICAL";
     $exit_value = 2;
   } elsif ($delta > $warn) {
     $state = "WARNING";
     $exit_value = 1;
   } elsif ($delta >= 0) {
     $state = "OK";
     $exit_value = 0;
   }

   $delta = sprintf '%.2f', $delta/3600.0;
   $message = "$delta hours old$extra_msg";
}
else {
  $state = "CRITITAL";
  $exit_value = 2;
}

print "BACKUP $state - $message | delta=$delta; elapsedtime=$last_elapsed_time; source_file_size=$last_source_file_size; mirror_file_size=$last_mirror_file_size; new_file_size=$last_new_file_size; changed_files=$last_changed_files; changed_size=$last_changed_size;;";
exit($exit_value);
