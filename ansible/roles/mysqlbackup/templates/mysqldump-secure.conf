# Mostly copied from:
# https://github.com/infOpen/ansible-role-mysql-backup/blob/master/templates/mysqldump-secure.conf.j2
#
# {{ ansible_managed }}

# Target output Directory
TARGET="{{ mysqlbackup_backupdir }}"
DUMP_DIR="{{ mysqlbackup_backupdir }}"

# Do not use /tmp, which might be too smal
# This will use mktmp in the backup dir and cleanup after.
TMP_DIR="{{ mysqlbackup_backupdir }}/tmp"

# NOTE: Must be chmod 0400
MYSQL_CNF_FILE="{{ mysqlbackup_cnf_file }}"

# For Zimbra servers
if [ -d "/opt/zimbra/common/bin/" ]; then
  PATH="$PATH:/opt/zimbra/common/bin/"
fi

# File/Folder permission of Target directory ($TARGET)
# and the actual dumped databases.
# If not otherwise needed, leave the
# protective secure default values
DUMP_DIR_CHMOD="750"
DUMP_FILE_CHMOD="440"

# mysqldump options
# --routines (Off by default)
# --events   (Off by default)
# --triggers (On by default)
# --opt      (On by default)
#   Included in --opt:
#    --add-drop-table
#    --add-locks
#    --create-options
#    --disable-keys
#    --extended-insert
#    --lock-tables
#    --quick
#    --set-charset
MYSQL_OPTS="{{ mysqlbackup_mysqldump_opts | join(' ') }}"

# Databases not to be dumped.
# (space separated)
IGNORE="{{ mysqlbackup_mysqldump_ignore_db | join(' ') }}"

# Ensure these tables are present
REQUIRE="{{ mysqlbackup_mysqldump_require_db | join(' ') }}"

# Use gzip compression?
# 1: yes
# 0: no (Default)
COMPRESS={{ mysqlbackup_mysqldump_compress_active }}

COMPRESS_BIN="gzip"
COMPRESS_EXT="gz"
COMPRESS_ARG="-6 --rsyncable"

# The script is whiny if these defaults aren't set.
DUMP_FILE_PRE="db_"
MYSQL_OPTS_QUICK_MIN_SIZE=200
CONSISTENT_DUMP_ONLY_INNODB=1
CONSISTENT_DUMP_NO_INNODB=1
CONSISTENT_DUMP_MIXED_INNODB=1
DUMP_FILE_INFO=1

# We're not using these
MYSQL_SSL_ENABLE=0
ENCRYPT=0

# These need to be set, otherwise the script fails without an error
OPENSSL_ALGO_ARG=""
OPENSSL_PUBKEY_PEM=""

######################################################################
# Delete old files?
######################################################################

#
# This relies completely on tmpwatch/tmpreamer and will delete all files recursively
# which modification time is older than X hours.
# tmpwatch/tmpreaper behavior applies:
#  * no symbolic links
#  * recursive
# @required   tmpwatch
#
# Command parsed to tmpwatch/tmpreaper
#
# tmpwatch -m ${DELETE_IF_OLDER} -v ${TARGET}/
# tmpreaper -m ${DELETE_IF_OLDER} -v ${TARGET}/

# Delete old files
# 1: yes
# 0: no (Default)
DELETE=1

# Script is whiny even if DELETE=0
DELETE_METHOD="tmpreaper"

# Only applicable if DELETE=1
# Delete all files recursively which mtime is older than this.
# [ML] We only need to keep 1 day of backups. Assuming this is called when
# the script is about to generate a new backup, so rdiff has already run.
DELETE_IF_OLDER=20h

# [ML] The script requires us to define this.
DELETE_FORCE=1

######################################################################
# Logging
######################################################################

# Log output to logfile
# 1: yes
# 0: no (Default)
LOG={{ mysqlbackup_mysqldump_logging_active }}

# Only applicable if LOG = 1
# NOTE: Must be writeable by the user who runs the script
# NOTE: Must be chmod 600
LOG_FILE="{{ mysqlbackup_logdir }}/mysqldump-secure.log"

LOG_CHMOD="0600"

######################################################################
# Monitoring Logging
######################################################################

# Enable separate logfile which can be parsed by check_mysqldump-secure
# in order to report success/warn/error state to nagios server
# The logfile is in classic .ini file format and must be readable by the
# nagios user.

# Enable Nagios Logfile
# 1: yes
# 0: no (Default)
NAGIOS_LOG={{ mysqlbackup_mysqldump_monitoring_active }}

NAGIOS_LOG_CHMOD="0644"

# Only applicable if NAGIOS_LOG = 1
# NOTE: Must be chmod 644
NAGIOS_LOG_FILE="{{ mysqlbackup_logdir }}/mysqldump-secure.monitoring.log"
